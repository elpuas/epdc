---
import styles from '../styles/LanguageSwitcher.module.css';
import { SUPPORTED_LANGUAGES, DEFAULT_LANGUAGE, type Language } from '../i18n/utils';

interface Props {
  currentLang: Language;
}

const { currentLang } = Astro.props;

const LANGUAGES = {
  en: { code: 'en', flag: 'ðŸ‡ºðŸ‡¸', name: 'English' },
  es: { code: 'es', flag: 'ðŸ‡¨ðŸ‡·', name: 'EspaÃ±ol' },
  it: { code: 'it', flag: 'ðŸ‡®ðŸ‡¹', name: 'Italiano' }
};
---

<div class={styles.switcher}>
  <button
    class={styles.toggle}
    id="language-switcher"
    aria-haspopup="true"
    aria-expanded="false"
  >
    {LANGUAGES[currentLang].flag}
  </button>

  <div
    id="language-dropdown"
    class={styles.menu}
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="language-switcher"
    hidden
  >
    {Object.entries(LANGUAGES).map(([code, { flag }]) => (
      <a
        href={`/${code}`}
        role="menuitem"
        data-lang={code}
        class={styles.menuItem}
      >
        {flag}
      </a>
    ))}
  </div>
</div>

<script>
  const switcher = document.getElementById('language-switcher');
  const dropdown = document.getElementById('language-dropdown');
  const links = dropdown?.querySelectorAll('a');

  // Toggle dropdown
  switcher?.addEventListener('click', () => {
    const isExpanded = switcher.getAttribute('aria-expanded') === 'true';
    switcher.setAttribute('aria-expanded', (!isExpanded).toString());
    dropdown?.toggleAttribute('hidden');
  });

  // Handle language selection
  links?.forEach((link) => {
    link.addEventListener('click', (e) => {
      e.preventDefault();
      const lang = link.getAttribute('data-lang');
      if (lang) {
        localStorage.setItem('preferredLanguage', lang);
        window.location.href = `/${lang}`;
      }
    });
  });

  // Close dropdown when clicking outside
  document.addEventListener('click', (e) => {
    if (!switcher?.contains(e.target as Node) && !dropdown?.contains(e.target as Node)) {
      switcher?.setAttribute('aria-expanded', 'false');
      dropdown?.setAttribute('hidden', '');
    }
  });

  // Check for preferred language on load
  const preferredLang = localStorage.getItem('preferredLanguage');
  const currentPath = window.location.pathname;
  const currentLang = currentPath.split('/')[1];

  if (preferredLang && preferredLang !== currentLang) {
    window.location.href = `/${preferredLang}${currentPath.slice(3)}`;
  }
</script> 