---
import Layout from '../layouts/Layout.astro';
const title = '404 - Defender Mini';
const description = "Oops! Page not found. But while you're here, enjoy a mini game!";
const lang = 'en';

export function getStaticPaths() {
  return [
    {params: {404: undefined}}
  ];
}
---

<Layout {title} {description} {lang}>
  <section style="position: relative; width: 100%; height: 100vh; background: black; overflow: hidden;">
    <div id="phaser-container" style="width: 100%; height: 100%;"></div>
    <div style="position: absolute; top: 10px; left: 10px; color: white; font-family: monospace; font-size: 14px;">
      404 - Page not found. Play Defender while you're here!
    </div>
  </section>
</Layout>

<script src="https://cdn.jsdelivr.net/npm/phaser@3/dist/phaser.js"></script>

<script type="module" is:inline>
  const config = {
    type: Phaser.AUTO,
    width: window.innerWidth,
    height: window.innerHeight,
    backgroundColor: '#000',
    parent: 'phaser-container',
    physics: { default: 'arcade' },
    scene: { preload, create, update }
  };

  let background, player, cursors, bullets, enemies, lastFired = 0, score = 0, scoreText;

  function preload() {
    this.load.spritesheet('defender', '/images/defender.png', { frameWidth: 8, frameHeight: 7 });
  }

  function create() {
    background = this.add.tileSprite(0, 0, config.width, config.height, 'defender', 0).setOrigin(0, 0).setScale(100, 1);

    player = this.physics.add.sprite(100, config.height / 2, 'defender', 94).setScale(3).setCollideWorldBounds(true);
    cursors = this.input.keyboard.createCursorKeys();
    bullets = this.physics.add.group();
    enemies = this.physics.add.group();

    for (let i = 0; i < 5; i++) {
      let enemy = enemies.create(config.width + i * 100, Phaser.Math.Between(50, config.height - 50), 'defender', 100).setScale(3);
      enemy.setVelocityX(-50);
    }

    this.anims.create({
      key: 'explode',
      frames: this.anims.generateFrameNumbers('defender', { start: 108, end: 112 }),
      frameRate: 12,
      hideOnComplete: true
    });

    this.physics.add.overlap(bullets, enemies, (bullet, enemy) => {
      bullet.destroy();
      enemy.destroy();
      let explosion = this.add.sprite(enemy.x, enemy.y, 'defender', 108).setScale(3);
      explosion.play('explode');
      score += 10;
      scoreText.setText(`Score: ${score}`);
    });

    scoreText = this.add.text(10, 10, 'Score: 0', { fontFamily: 'monospace', fontSize: '16px', fill: '#fff' });
  }

  function update(time) {
    background.tilePositionX += 1;

    if (cursors.up.isDown) player.setVelocityY(-200);
    else if (cursors.down.isDown) player.setVelocityY(200);
    else player.setVelocityY(0);

    if (cursors.left.isDown) player.setVelocityX(-200);
    else if (cursors.right.isDown) player.setVelocityX(200);
    else player.setVelocityX(0);

    if (cursors.space.isDown && time > lastFired) {
      let bullet = bullets.create(player.x + 16, player.y, 'defender', 105).setScale(3);
      bullet.setVelocityX(300);
      lastFired = time + 300;
    }

    bullets.children.iterate(b => { if (b && b.x > config.width) b.destroy(); });

    enemies.children.iterate(e => {
      if (e && e.x < -50) {
        e.x = config.width + 50;
        e.y = Phaser.Math.Between(50, config.height - 50);
      }
    });
  }

  new Phaser.Game(config);
</script> 