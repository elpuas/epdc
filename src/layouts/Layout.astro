---
import type { Props } from 'astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import BaseHead from '../components/BaseHead.astro';
import type { Language } from '../i18n/utils';
import '../styles/global.css';
import styles from '../styles/Layout.module.css';

interface LayoutProps {
  lang: string;
  title: string;
  description: string;
}

const { lang = 'en', title = 'Welcome', description = 'Welcome to our site' } = Astro.props as unknown as LayoutProps;
// Ensure lang is a valid Language type
const validLang = (lang === 'en' || lang === 'es' || lang === 'it') ? lang as Language : 'en' as Language;
---

<!DOCTYPE html>
<html lang={lang} data-theme="light">
  <head>
    <BaseHead title={title} description={description} />
  </head>
  <body>
    <header>
      <div class:list={styles.wrapper}>
        <Header lang={validLang} />
      </div>
    </header>
    <main>
      <div class:list={styles.wrapper}>
        <div class:list={styles.content}>
          <slot />
        </div>
      </div>
    </main>
    <footer>
      <div class:list={styles.wrapper}>
        <Footer lang={lang} />
      </div>
    </footer>
    
    <script>
      // Black and White Theme Toggle with Persistence
      document.addEventListener('DOMContentLoaded', () => {
        const bwToggle = document.getElementById('bw-toggle');
        const html = document.documentElement;
        
        // Load saved theme from localStorage
        const savedTheme = localStorage.getItem('epdc-theme');
        if (savedTheme && (savedTheme === 'light' || savedTheme === 'bw')) {
          html.setAttribute('data-theme', savedTheme);
        }
        
        if (bwToggle) {
          bwToggle.addEventListener('click', () => {
            const currentTheme = html.getAttribute('data-theme');
            const newTheme = currentTheme === 'light' ? 'bw' : 'light';
            
            // Update DOM
            html.setAttribute('data-theme', newTheme);
            
            // Save to localStorage
            localStorage.setItem('epdc-theme', newTheme);
            
            // Update button aria-label
            const isBlackWhite = newTheme === 'bw';
            bwToggle.setAttribute('aria-label', 
              isBlackWhite ? 'Switch to color mode' : 'Toggle black and white mode'
            );
          });
        }
      });
    </script>
  </body>
</html> 