---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import StructuredData from '../components/StructuredData.astro';
import type { Language } from '../i18n/utils';
import '../styles/global.css';
import stylesBlog from '../styles/ProjectLayout.module.css';
import styles from '../styles/Layout.module.css';


type Props = CollectionEntry<'blog'>['data'] & { author?: string };

const { title, description = '', date, author = 'ElPuas Digital Crafts', lang = 'en' as Language } = Astro.props;
const pubDate = date;

const data = {
	'@context': 'https://schema.org',
	'@type': 'Article',
	headline: title,
	description,
	author: {
		'@type': 'Organization',
		name: author
	},
	datePublished: date,
	inLanguage: lang,
	mainEntityOfPage: {
		'@type': 'WebPage',
		'@id': `https://elpuasdigitalcrafts.com/${lang}/blog/${Astro.url.pathname.split('/').pop()}`
	}
}
---
<!DOCTYPE html>
<html lang={lang}>
	<head>
		<BaseHead title={title} description={description} />
		<StructuredData {data} />
	</head>

	<body>
		<header>
			<div class:list={styles.wrapper}>
				<Header lang={lang} />
			</div>
		</header>
		<main>
		<article class:list={stylesBlog.article}>
			<div class="prose" class:list={stylesBlog.prose}>
				<div class="title">
					<h1>{title}</h1>
					<div class="blog-date">
						<FormattedDate date={pubDate} />
						<p>By <span class="accent">{author}</span></p>
					</div>
				</div>
				<slot />
			</div>
		</article>
</main>
<footer>
	<div class:list={styles.wrapper}>
		<Footer lang={lang} />
	</div>
</footer>
<script>
// Black and White Theme Toggle with Persistence
document.addEventListener('DOMContentLoaded', () => {
	const bwToggle = document.getElementById('bw-toggle');
	const html = document.documentElement;
	
	// Load saved theme from localStorage
	const savedTheme = localStorage.getItem('epdc-theme');
	if (savedTheme && (savedTheme === 'light' || savedTheme === 'bw')) {
	html.setAttribute('data-theme', savedTheme);
	}
	
	if (bwToggle) {
	bwToggle.addEventListener('click', () => {
		const currentTheme = html.getAttribute('data-theme');
		const newTheme = currentTheme === 'light' ? 'bw' : 'light';
		
		// Update DOM
		html.setAttribute('data-theme', newTheme);
		
		// Save to localStorage
		localStorage.setItem('epdc-theme', newTheme);
		
		// Update button aria-label
		const isBlackWhite = newTheme === 'bw';
		bwToggle.setAttribute('aria-label', 
		isBlackWhite ? 'Switch to color mode' : 'Toggle black and white mode'
		);
	});
	}
});
</script>
</body>
</html> 